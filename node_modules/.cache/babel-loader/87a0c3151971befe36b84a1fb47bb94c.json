{"ast":null,"code":"var _jsxFileName = \"/Users/personal/SynologyDrive/Drive/Dev/code/media/src/components/Media/Player/background.js\";\nimport React from 'react'; //import PropTypes from 'prop-types';\n\nimport ReactJWPlayer from 'react-jw-player';\nconst displayName = 'ReactJWPlayerContainer';\n\nclass ReactJWPlayerContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videoTitle: ''\n    };\n    this.onAdPlay = this.onAdPlay.bind(this);\n    this.onReady = this.onReady.bind(this);\n    this.onVideoLoad = this.onVideoLoad.bind(this);\n    this.playerId = 'player-id'; // TODO: someFunctionToRandomlyGenerateId();each instance of <ReactJWPlayer> needs a unique id.\n  }\n\n  onReady(event) {\n    // interact with JW Player API here\n    const player = window.jwplayer(this.playerId);\n  }\n\n  onAdPlay(event) {// track the ad play here\n  }\n\n  onVideoLoad(event) {\n    this.setState({\n      videoTitle: event.item.description // this only works with json feeds!\n\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(ReactJWPlayer, {\n      licenseKey: this.props.player.licenseKey //playlist={this.props.playlist}\n      ,\n      file: this.props.player.file,\n      image: this.props.player.image,\n      isMuted: this.props.player.isMuted,\n      isAutoPlay: this.props.player.isAutoPlay,\n      controlbar: this.props.player.controlBar,\n      onAdPlay: this.onAdPlay,\n      onReady: this.onReady,\n      onVideoLoad: this.onVideoLoad,\n      playerId: this.playerId // bring in the randomly generated playerId\n      ,\n      playerScript: this.props.player.playerScript //'https://content.jwplatform.com/libraries/Jq6HIbgz.js' \n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n} //ReactJWPlayerContainer.propTypes = propTypes;\n\n\nReactJWPlayerContainer.displayName = displayName;\nexport default ReactJWPlayerContainer;","map":{"version":3,"sources":["/Users/personal/SynologyDrive/Drive/Dev/code/media/src/components/Media/Player/background.js"],"names":["React","ReactJWPlayer","displayName","ReactJWPlayerContainer","Component","constructor","props","state","videoTitle","onAdPlay","bind","onReady","onVideoLoad","playerId","event","player","window","jwplayer","setState","item","description","render","licenseKey","file","image","isMuted","isAutoPlay","controlBar","playerScript"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,WAAW,GAAG,wBAApB;;AAEA,MAAMC,sBAAN,SAAqCH,KAAK,CAACI,SAA3C,CAAqD;AAEnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAIA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKE,WAAL,GAAmB,KAAKA,WAAL,CAAiBF,IAAjB,CAAsB,IAAtB,CAAnB;AAEA,SAAKG,QAAL,GAAgB,WAAhB,CAXiB,CAWY;AAE9B;;AAEDF,EAAAA,OAAO,CAACG,KAAD,EAAQ;AACb;AACA,UAAMC,MAAM,GAAGC,MAAM,CAACC,QAAP,CAAgB,KAAKJ,QAArB,CAAf;AACD;;AACDJ,EAAAA,QAAQ,CAACK,KAAD,EAAQ,CACd;AACD;;AACDF,EAAAA,WAAW,CAACE,KAAD,EAAQ;AACjB,SAAKI,QAAL,CAAc;AACZV,MAAAA,UAAU,EAAEM,KAAK,CAACK,IAAN,CAAWC,WADX,CACuB;;AADvB,KAAd;AAGD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACU,oBAAC,aAAD;AACE,MAAA,UAAU,EAAE,KAAKf,KAAL,CAAWS,MAAX,CAAkBO,UADhC,CAEE;AAFF;AAIE,MAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWS,MAAX,CAAkBQ,IAJ1B;AAKE,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWS,MAAX,CAAkBS,KAL3B;AAME,MAAA,OAAO,EAAE,KAAKlB,KAAL,CAAWS,MAAX,CAAkBU,OAN7B;AAOE,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,MAAX,CAAkBW,UAPhC;AAQE,MAAA,UAAU,EAAE,KAAKpB,KAAL,CAAWS,MAAX,CAAkBY,UARhC;AAUE,MAAA,QAAQ,EAAE,KAAKlB,QAVjB;AAWE,MAAA,OAAO,EAAE,KAAKE,OAXhB;AAYE,MAAA,WAAW,EAAE,KAAKC,WAZpB;AAcE,MAAA,QAAQ,EAAE,KAAKC,QAdjB,CAc2B;AAd3B;AAeE,MAAA,YAAY,EAAG,KAAKP,KAAL,CAAWS,MAAX,CAAkBa,YAfnC,CAeiD;AAfjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADV,CADF;AAsBD;;AApDkD,C,CAuDrD;;;AACAzB,sBAAsB,CAACD,WAAvB,GAAqCA,WAArC;AACA,eAAeC,sBAAf","sourcesContent":["import React from 'react';\n//import PropTypes from 'prop-types';\nimport ReactJWPlayer from 'react-jw-player';\n \nconst displayName = 'ReactJWPlayerContainer';\n \nclass ReactJWPlayerContainer extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      videoTitle: '',\n    };\n \n    this.onAdPlay = this.onAdPlay.bind(this);\n    this.onReady = this.onReady.bind(this);\n    this.onVideoLoad = this.onVideoLoad.bind(this);\n \n    this.playerId = 'player-id'; // TODO: someFunctionToRandomlyGenerateId();each instance of <ReactJWPlayer> needs a unique id.\n    \n  }\n\n  onReady(event) {\n    // interact with JW Player API here\n    const player = window.jwplayer(this.playerId);\n  }\n  onAdPlay(event) {\n    // track the ad play here\n  }\n  onVideoLoad(event) {\n    this.setState({\n      videoTitle: event.item.description // this only works with json feeds!\n    });\n  }\n  render() {\n    return (\n      <div className=''>\n                <ReactJWPlayer\n                  licenseKey={this.props.player.licenseKey}\n                  //playlist={this.props.playlist}\n\n                  file={this.props.player.file}\n                  image={this.props.player.image}\n                  isMuted={this.props.player.isMuted}\n                  isAutoPlay={this.props.player.isAutoPlay}\n                  controlbar={this.props.player.controlBar}\n\n                  onAdPlay={this.onAdPlay}\n                  onReady={this.onReady}\n                  onVideoLoad={this.onVideoLoad}\n                  \n                  playerId={this.playerId} // bring in the randomly generated playerId\n                  playerScript= {this.props.player.playerScript} //'https://content.jwplatform.com/libraries/Jq6HIbgz.js' \n                />\n\n      </div>\n    );\n  }\n}\n \n//ReactJWPlayerContainer.propTypes = propTypes;\nReactJWPlayerContainer.displayName = displayName;\nexport default ReactJWPlayerContainer;"]},"metadata":{},"sourceType":"module"}