{"ast":null,"code":"import _slicedToArray from \"/Users/personal/SynologyDrive/Drive/Dev/code/media/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useRef, useEffect } from 'react';\nconst PADDINGS = 110;\n\nconst useSliding = (elementWidth, countElements) => {\n  const containerRef = useRef(null);\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        containerWidth = _useState2[0],\n        setContainerWidth = _useState2[1];\n\n  const _useState3 = useState(0),\n        _useState4 = _slicedToArray(_useState3, 2),\n        distance = _useState4[0],\n        setDistance = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        totalInViewport = _useState6[0],\n        setTotalInViewport = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        viewed = _useState8[0],\n        setViewed = _useState8[1];\n\n  useEffect(() => {\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  const handlePrev = () => {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  };\n\n  const handleNext = () => {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth);\n  };\n\n  const slideProps = {\n    style: {\n      transform: \"translate3d(\".concat(distance, \"px, 0, 0)\")\n    }\n  };\n  const hasPrev = distance < 0;\n  const hasNext = viewed + totalInViewport < countElements;\n  return {\n    handlePrev,\n    handleNext,\n    slideProps,\n    containerRef,\n    hasPrev,\n    hasNext\n  };\n};\n\nexport default useSliding;","map":{"version":3,"sources":["/Users/personal/SynologyDrive/Drive/Dev/code/media/src/components/Media/Carousel/useSliding.js"],"names":["useState","useRef","useEffect","PADDINGS","useSliding","elementWidth","countElements","containerRef","containerWidth","setContainerWidth","distance","setDistance","totalInViewport","setTotalInViewport","viewed","setViewed","current","clientWidth","Math","floor","handlePrev","handleNext","slideProps","style","transform","hasPrev","hasNext"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AAEA,MAAMC,QAAQ,GAAG,GAAjB;;AAEA,MAAMC,UAAU,GAAG,CAACC,YAAD,EAAeC,aAAf,KAAiC;AAClD,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;;AADkD,oBAEND,QAAQ,CAAC,CAAD,CAFF;AAAA;AAAA,QAE3CQ,cAF2C;AAAA,QAE3BC,iBAF2B;;AAAA,qBAGlBT,QAAQ,CAAC,CAAD,CAHU;AAAA;AAAA,QAG3CU,QAH2C;AAAA,QAGjCC,WAHiC;;AAAA,qBAIJX,QAAQ,CAAC,CAAD,CAJJ;AAAA;AAAA,QAI3CY,eAJ2C;AAAA,QAI1BC,kBAJ0B;;AAAA,qBAKtBb,QAAQ,CAAC,CAAD,CALc;AAAA;AAAA,QAK3Cc,MAL2C;AAAA,QAKnCC,SALmC;;AAOlDb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,cAAc,GAAGD,YAAY,CAACS,OAAb,CAAqBC,WAArB,GAAmCd,QAA1D;AAEAM,IAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACAK,IAAAA,kBAAkB,CAACK,IAAI,CAACC,KAAL,CAAWX,cAAc,GAAGH,YAA5B,CAAD,CAAlB;AACD,GALQ,EAKN,CAACE,YAAY,CAACS,OAAd,CALM,CAAT;;AAOA,QAAMI,UAAU,GAAG,MAAM;AACvBL,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,QAAMa,UAAU,GAAG,MAAM;AACvBN,IAAAA,SAAS,CAACD,MAAM,GAAGF,eAAV,CAAT;AACAD,IAAAA,WAAW,CAACD,QAAQ,GAAGF,cAAZ,CAAX;AACD,GAHD;;AAKA,QAAMc,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,wBAAiBd,QAAjB;AAAX;AADU,GAAnB;AAIA,QAAMe,OAAO,GAAGf,QAAQ,GAAG,CAA3B;AACA,QAAMgB,OAAO,GAAIZ,MAAM,GAAGF,eAAV,GAA6BN,aAA7C;AAEA,SAAO;AAAEc,IAAAA,UAAF;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,UAA1B;AAAsCf,IAAAA,YAAtC;AAAoDkB,IAAAA,OAApD;AAA6DC,IAAAA;AAA7D,GAAP;AACD,CAhCD;;AAkCA,eAAetB,UAAf","sourcesContent":["import { useState, useRef, useEffect } from 'react'\n\nconst PADDINGS = 110;\n\nconst useSliding = (elementWidth, countElements) => {\n  const containerRef = useRef(null);\n  const [containerWidth, setContainerWidth] = useState(0);\n  const [distance, setDistance] = useState(0);\n  const [totalInViewport, setTotalInViewport] = useState(0)\n  const [viewed, setViewed] = useState(0);\n\n  useEffect(() => {\n    const containerWidth = containerRef.current.clientWidth - PADDINGS;\n\n    setContainerWidth(containerWidth);\n    setTotalInViewport(Math.floor(containerWidth / elementWidth));\n  }, [containerRef.current]);\n\n  const handlePrev = () => {\n    setViewed(viewed - totalInViewport);\n    setDistance(distance + containerWidth);\n  }\n\n  const handleNext = () => {\n    setViewed(viewed + totalInViewport);\n    setDistance(distance - containerWidth)\n  }\n\n  const slideProps = {\n    style: { transform: `translate3d(${distance}px, 0, 0)` }\n  };\n\n  const hasPrev = distance < 0;\n  const hasNext = (viewed + totalInViewport) < countElements;\n\n  return { handlePrev, handleNext, slideProps, containerRef, hasPrev, hasNext };\n}\n\nexport default useSliding;"]},"metadata":{},"sourceType":"module"}