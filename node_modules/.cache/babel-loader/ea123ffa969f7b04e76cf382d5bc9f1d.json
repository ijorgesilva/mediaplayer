{"ast":null,"code":"import _slicedToArray from \"/Users/personal/SynologyDrive/Drive/Dev/code/media/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/personal/SynologyDrive/Drive/Dev/code/media/src/components/Media/Carousel/Slider.js\";\nimport React, { useState } from 'react';\nimport cx from 'classnames';\nimport SliderContext from './context';\nimport Content from './Content';\nimport SlideButton from './SlideButton';\nimport SliderWrapper from './SliderWrapper';\nimport useSliding from './useSliding';\nimport useSizeElement from './useSizeElement';\n\nconst Slider = ({\n  children,\n  activeSlide\n}) => {\n  const _useState = useState(activeSlide),\n        _useState2 = _slicedToArray(_useState, 2),\n        currentSlide = _useState2[0],\n        setCurrentSlide = _useState2[1];\n\n  const _useSizeElement = useSizeElement(),\n        width = _useSizeElement.width,\n        elementRef = _useSizeElement.elementRef;\n\n  const _useSliding = useSliding(width, React.Children.count(children)),\n        handlePrev = _useSliding.handlePrev,\n        handleNext = _useSliding.handleNext,\n        slideProps = _useSliding.slideProps,\n        containerRef = _useSliding.containerRef,\n        hasNext = _useSliding.hasNext,\n        hasPrev = _useSliding.hasPrev;\n\n  const handleSelect = video => {\n    setCurrentSlide(video);\n  };\n\n  const handleClose = () => {\n    setCurrentSlide(null);\n  };\n\n  const contextValue = {\n    onSelectSlide: handleSelect,\n    onCloseSlide: handleClose,\n    elementRef,\n    currentSlide\n  };\n  return React.createElement(SliderContext.Provider, {\n    value: contextValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(SliderWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: cx('slider', {\n      'slider--open': currentSlide != null\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({\n    ref: containerRef,\n    className: \"slider__container\"\n  }, slideProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), children)), hasPrev && React.createElement(SlideButton, {\n    onClick: handlePrev,\n    type: \"prev\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), hasNext && React.createElement(SlideButton, {\n    onClick: handleNext,\n    type: \"next\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  })), currentSlide && React.createElement(Content, {\n    video: currentSlide,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nexport default Slider;","map":{"version":3,"sources":["/Users/personal/SynologyDrive/Drive/Dev/code/media/src/components/Media/Carousel/Slider.js"],"names":["React","useState","cx","SliderContext","Content","SlideButton","SliderWrapper","useSliding","useSizeElement","Slider","children","activeSlide","currentSlide","setCurrentSlide","width","elementRef","Children","count","handlePrev","handleNext","slideProps","containerRef","hasNext","hasPrev","handleSelect","video","handleClose","contextValue","onSelectSlide","onCloseSlide"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+B;AAAA,oBACJV,QAAQ,CAACU,WAAD,CADJ;AAAA;AAAA,QACrCC,YADqC;AAAA,QACvBC,eADuB;;AAAA,0BAEdL,cAAc,EAFA;AAAA,QAEpCM,KAFoC,mBAEpCA,KAFoC;AAAA,QAE7BC,UAF6B,mBAE7BA,UAF6B;;AAAA,sBAUxCR,UAAU,CAACO,KAAD,EAAQd,KAAK,CAACgB,QAAN,CAAeC,KAAf,CAAqBP,QAArB,CAAR,CAV8B;AAAA,QAI1CQ,UAJ0C,eAI1CA,UAJ0C;AAAA,QAK1CC,UAL0C,eAK1CA,UAL0C;AAAA,QAM1CC,UAN0C,eAM1CA,UAN0C;AAAA,QAO1CC,YAP0C,eAO1CA,YAP0C;AAAA,QAQ1CC,OAR0C,eAQ1CA,OAR0C;AAAA,QAS1CC,OAT0C,eAS1CA,OAT0C;;AAY5C,QAAMC,YAAY,GAAGC,KAAK,IAAI;AAC5BZ,IAAAA,eAAe,CAACY,KAAD,CAAf;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACxBb,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;;AAIA,QAAMc,YAAY,GAAG;AACnBC,IAAAA,aAAa,EAAEJ,YADI;AAEnBK,IAAAA,YAAY,EAAEH,WAFK;AAGnBX,IAAAA,UAHmB;AAInBH,IAAAA;AAJmB,GAArB;AAOA,SACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEe,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAK,IAAA,SAAS,EAAEzB,EAAE,CAAC,QAAD,EAAW;AAAE,sBAAgBU,YAAY,IAAI;AAAlC,KAAX,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAES,YAAV;AAAwB,IAAA,SAAS,EAAC;AAAlC,KAA0DD,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuEV,QAAvE,CADF,CAFF,EAMGa,OAAO,IAAI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEL,UAAtB;AAAkC,IAAA,IAAI,EAAC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANd,EAOGI,OAAO,IAAI,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAEH,UAAtB;AAAkC,IAAA,IAAI,EAAC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPd,CADF,EAWGP,YAAY,IAAI,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEA,YAAhB;AAA8B,IAAA,OAAO,EAAEc,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXnB,CADF;AAeD,CA1CD;;AA4CA,eAAejB,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport cx from 'classnames';\nimport SliderContext from './context'\nimport Content from './Content'\nimport SlideButton from './SlideButton'\nimport SliderWrapper from './SliderWrapper'\nimport useSliding from './useSliding'\nimport useSizeElement from './useSizeElement'\n\nconst Slider = ({ children, activeSlide }) => {\n  const [currentSlide, setCurrentSlide] = useState(activeSlide);\n  const { width, elementRef } = useSizeElement();\n  const {\n    handlePrev,\n    handleNext,\n    slideProps,\n    containerRef,\n    hasNext,\n    hasPrev\n  } = useSliding(width, React.Children.count(children));\n\n  const handleSelect = video => {\n    setCurrentSlide(video);\n  };\n\n  const handleClose = () => {\n    setCurrentSlide(null);\n  };\n\n  const contextValue = {\n    onSelectSlide: handleSelect,\n    onCloseSlide: handleClose,\n    elementRef,\n    currentSlide,\n  };\n\n  return (\n    <SliderContext.Provider value={contextValue}>\n      <SliderWrapper>\n\n        <div className={cx('slider', { 'slider--open': currentSlide != null })}>\n          <div ref={containerRef} className=\"slider__container\" {...slideProps}>{children}</div>\n        </div>\n\n        {hasPrev && <SlideButton onClick={handlePrev} type=\"prev\" />}\n        {hasNext && <SlideButton onClick={handleNext} type=\"next\" />}\n        \n      </SliderWrapper>\n      {currentSlide && <Content video={currentSlide} onClose={handleClose} />}\n    </SliderContext.Provider>\n  );\n};\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}